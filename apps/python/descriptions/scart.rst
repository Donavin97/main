The archive tool scart reads and writes :term:`SDS` archives and files
in miniSEED format and checks miniSEED archives.

* **Dump mode:** Create miniSEED files (multiplexed), e.g. for playbacks, from
  :term:`SDS` structured data (e.g. created by slarchive) or from data passed
  from another record source such as :ref:`Arclink <rs-arclink>`.
* **Dump mode:** Play back records directly out of an SDS structure.
* **Import mode:** Import multiplexed miniSEED files into a local SDS waveform
  archive.
* **Check mode:** Check an archive of miniSEED files for out-of-order records in
  files.


.. hint::

   In dump mode scart can filter streams using stream lists with time windows
   (:option:`--list`) or without as NSLC lists (:option:`--nslc`) which can can be
   generated per event by :ref:`scevtstreams` or from inventory using :ref:`scinv`,
   respectively.  It is hence possible to save event based waveform data in
   combination with :ref:`scevtstreams`.

.. warning::

   * When creating :term:`SDS` archives, scart simply appends the new records to
     existing ones. Multiple imports of the same data result in duplication.
   * Out-of-order imports of waveforms into a SDS archive result in out-of-order
     records which may not be processed. Clean your archive using :ref:`scmssort`.
   * The new input data for an SDS archive must be sorted by time. Otherwise,
     the SDS archive may not be correctly readable. Combine scart with
     :ref:`scmssort` for multiplexing and removal of duplicates.

.. hint::

   Waveforms may be controlled using files of time window - stream lists (``--list``)
   or NSLC lists (``--nslc``) generated by :ref:`scevtstreams` or :ref:`scinv`,
   respectively.


.. _scart-config:

Configuration
=============

scart can make use of :ref:`global_recordstream`
implementations which are provided by additional plugins.
For loading additional plugins, e.g. the *xyz* plugin create and configure :file:`scart.cfg`:

.. code-block:: sh

   plugins = xyz


Examples
========

#. Extract data from the default :term:`SDS` archive in :file:`$SEISCOMP_ROOT/var/lib/archive`
   or from a local :term:`SDS` archive [SDS archive] into a miniSEED file :file:`file.mseed`
   and sort by end time of the records:

   .. code-block:: sh

      scart -dsvE -t '[start-time]~[end-time]' > file.mseed
      scart -dsvE -t '[start-time]~[end-time]' [SDS archive] > [file.mseed]

   .. note::

      Sorting data is computational expensive but required for waveform playbacks.

#. Push miniSEED data from file :file:`file.mseed` into a local :term:`SDS`
   archive. Additionally, you may check if the records of the created files are
   correctly ordered:

   .. code-block:: sh

      scart -I [file.mseed] [SDS archive]
      scart -I [file.mseed] --with-filecheck [SDS archive]

#. Collect data from an FDSNWS server using the :ref:`global_recordstream`
   interface and write to a miniSEED file. The data streams and the time spans are
   defined in a list file using the option ``list``. The list can be generated e.g.
   by :ref:`scevtstreams`.

   .. code-block:: sh

      scart -I fdsnws://[server]:80 --list list.file --stdout > file.mseed

#. Check all files of an SDS archive or other directory structure for
   miniSEED files with out-of-order records:

   .. code-block:: sh

      scart --check [SDS archive]
