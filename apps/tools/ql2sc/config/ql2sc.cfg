# Send journals and event specific updates to the EVENT group.
connection.primaryGroup = EVENT

# Receive objects from EVENT group. This is necessary to wait for event
# association of imported origins.
connection.subscriptions = EVENT

# Number of seconds to fetch missed updates on start up.
backLog = 1800

# Maximum number of notifiers to batch in one message. If set to 0 no size
# limit is enforced. Make sure to not hit the overall message size limited of
# 16MiB which is enforced by the messaging system.
batchSize = 2000

# If event synchronisation is enabled and an incoming origin is not yet
# associated with an event on the target machine, then this timeout defines the
# maximum number of seconds to wait for an association.
eventAssociationTimeout = 10

# Registration of the host profiles defining the connection parameters to the
# QuakeLink hosts.
#hosts = local

# URL of the QuakeLink service, the scheme 'qls' enables SSL.
# Format: [ql[s]://][user:pwd@][host][:port].
# If set to an empty string the application will run without any QuakeLink
# connection attempt.
#host.local.url = ql://localhost:18010

# Enable/disable GZip (GNU zip) compression.
#host.local.gzip = false

# Request native data instead of XML format. Native data export may be disabled
# on some hosts.
#host.local.native = true

# Try to update the event attributes of the target event with the attributes of
# the source event which includes event type and event certainty. It will not
# import events but tries to find the associated event of the input preferred
# origin at the target system and will update the event attributes via
# journaling.
#host.local.syncEventAttributes = true

# Synchronize the preferred origin and preferred magnitude selection if
# different from the imported selection. ql2sc will wait for the event
# association of an imported origin and check if the preferred origin or
# preferred magnitude is different from the imported Quakelink event. If so it
# will send a journal to force selection of the preferred origin and selection
# of the preferred magnitude type. These are the same operations as within
# scolv to fix an origin and a particular magnitude type.
#host.local.syncPreferred = false

# Delays the synchronization of event attributes in seconds if set to a value
# greater than zero.
#host.local.syncEventDelay = 0

# Request server to send keep alive message every 30s to prevent connection
# reset by firewalls on long idle periods. If activated the client will reset
# the connection if no alive message is received within 60s.
#host.local.keepAlive = true

# Server-side SQL like WHERE clause to filter the result set. The actual
# available parameters depend on the QuakeLink server version. Use 'telnet host
# port' followed by 'help select' to connect to a QuakeLink server an request
# available parameters.
# clause := condition[ AND|OR [(]clause[)]] condition :=
# MAG|DEPTH|LAT|LON|PHASES|DIST(lat,lon) op {float} | DIST(lat,lon) IN
# [{float}, {float}] | UPDATED|OTIME op time |
# AGENCY|AUTHOR|STATUS|ESTATUS|EMODE|TYPE|CTYPE|DTYPE|REGION|MAG_T op 'string'
# | MAG|DEPTH|LAT|LON|PHASES|OTIME|UPDATED IS [NOT] NULL FELT|NOT FELT op :=
# =|!=|>|>=|<|<=|eq|gt|ge|lt|ge time := %Y,%m,%d[,%H,%M,%S[,%f]]
#host.local.filter = ""

# Map datamodel class names to messaging groups. For unmapped objects the
# mapping of their parent objects is evaluated recursively. Objects may be
# excluded by mapping them to 'NULL'.
#host.local.routingTable = Pick:IMPORT_GROUP, Amplitude:IMPORT_GROUP, FocalMechanism:EVENT, Origin:EVENT

# Include picks
#host.local.data.picks = true

# Include amplitudes
#host.local.data.amplitudes = true

# Include origin arrivals
#host.local.data.arrivals = true

# Include origin station magnitudes
#host.local.data.staMags = true

# Include moment tensor station contributions and phase settings
#host.local.data.staMts = true

# Include only preferred origin and magnitude information
#host.local.data.preferred = false

# Defines a blacklist of publicID prefixes that are not allowed for processing.
# Separate items by comma.
#processing.blacklist.publicIDs = ""

# Defines a whitelist of publicID prefixes that are allowed for processing.
# Separate items by comma.
#processing.whitelist.publicIDs = ""
